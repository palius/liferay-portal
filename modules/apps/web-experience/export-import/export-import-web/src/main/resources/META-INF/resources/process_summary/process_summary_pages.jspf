<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%!
public ArrayList getChildPageNames(String basePageName, JSONObject layoutArrayChildElement) {
	ArrayList pageNames = new ArrayList();

	JSONArray childrenLayouts = layoutArrayChildElement.getJSONArray("layouts");

	for (int i = 0; i < childrenLayouts.length(); ++i) {
		JSONObject childLayout = childrenLayouts.getJSONObject(i);

		String childPageName = basePageName + StringPool.FORWARD_SLASH + childLayout.getString("name");

		pageNames.add(childPageName);

		if (childLayout.getBoolean("hasChildren")) {
			ArrayList childPageNames = getChildPageNames(childPageName, childLayout.getJSONObject("children"));
			pageNames.addAll(childPageNames);
		}
	}

	return pageNames;
}

public ArrayList getPageNames(JSONArray layoutsArray) {
	ArrayList pageNames = new ArrayList();

	for (int i = 0; i < layoutsArray.length(); ++i) {
		JSONObject layoutArrayElement = layoutsArray.getJSONObject(i);

		String pageName = layoutArrayElement.getString("name");

		pageNames.add(pageName);

		if (layoutArrayElement.getBoolean("hasChildren")) {
			ArrayList childPageNames = getChildPageNames(pageName, layoutArrayElement.getJSONObject("children"));
			pageNames.addAll(childPageNames);
		}
	}

	return pageNames;
}
%>

<%
boolean isPrivateLayout = MapUtil.getBoolean(exportImportConfigurationSettingsMap, "privateLayout");

String publicPagesDescription = (isPrivateLayout) ? LanguageUtil.get(request, "private-pages") : LanguageUtil.get(request, "public-pages");

long layoutSetBranchId = MapUtil.getLong(parameterMap, "layoutSetBranchId");

LayoutSetBranch layoutSetBranch = null;

long[] selectedLayoutIds = null;

ArrayList<String> pageNames = new ArrayList<>();

if (Validator.isNotNull(MapUtil.getString(parameterMap, "layoutSetBranchId"))) {
	layoutSetBranch = LayoutSetBranchLocalServiceUtil.getLayoutSetBranch(layoutSetBranchId);

	selectedLayoutIds = GetterUtil.getLongValues(exportImportConfigurationSettingsMap.get("layoutIds"));

	String layoutsJSONString = LayoutsTreeUtil.getLayoutsJSON(request, groupId, isPrivateLayout, LayoutConstants.DEFAULT_PARENT_LAYOUT_ID, selectedLayoutIds, false, "asd");

	JSONObject layoutsJSON = JSONFactoryUtil.createJSONObject(layoutsJSONString);

	JSONArray layoutsArray = layoutsJSON.getJSONArray("layouts");

	pageNames = getPageNames(layoutsArray);
}

boolean themeSettings = MapUtil.getBoolean(parameterMap, PortletDataHandlerKeys.THEME_REFERENCE);

boolean logo = MapUtil.getBoolean(parameterMap, PortletDataHandlerKeys.LOGO);

boolean layoutSetSettings = MapUtil.getBoolean(parameterMap, PortletDataHandlerKeys.LAYOUT_SET_SETTINGS);

boolean layoutSetPrototypeSettings = MapUtil.getBoolean(parameterMap, PortletDataHandlerKeys.LAYOUT_SET_PROTOTYPE_SETTINGS);

boolean deleteMissingLayouts = MapUtil.getBoolean(parameterMap, PortletDataHandlerKeys.DELETE_MISSING_LAYOUTS);
%>

<div class="process-summary-section">
	<div class="sheet-subtitle"><liferay-ui:message key="pages" /></div>

	<div class="process-summary-subsection">
		<label>
			<liferay-ui:message key="pages-option" />:
		</label>

		<span><%= publicPagesDescription %></span>
	</div>

	<c:if test="<%= layoutSetBranch != null %>">
		<div class="process-summary-subsection">
			<label>
				<liferay-ui:message key="site-pages-variation" />:
			</label>

			<span><%= layoutSetBranch.getName() %></span>
		</div>
	</c:if>

	<c:if test="<%= pageNames.size() != 0 %>">
		<div class="process-summary-subsection">
			<div>
				<label>
					<liferay-ui:message key="pages-to-publish" />:
				</label>
			</div>

			<%
			for (String pageName : pageNames) {
			%>

				<div><%= pageName %></div>

			<%
			}
			%>

		</div>
	</c:if>

	<c:if test="<%= themeSettings || logo || layoutSetSettings || layoutSetPrototypeSettings || deleteMissingLayouts %>">
		<div class="process-summary-subsection">
			<div>
				<label>
					<liferay-ui:message key="look-and-feel" />:
				</label>
			</div>

			<c:if test="<%= themeSettings %>">
				<div>- <liferay-ui:message key="theme-settings" /></div>
			</c:if>

			<c:if test="<%= logo %>">
				<div>- <liferay-ui:message key="logo" /></div>
			</c:if>

			<c:if test="<%= layoutSetSettings %>">
				<div>- <liferay-ui:message key="site-pages-settings" /></div>
			</c:if>

			<c:if test="<%= layoutSetPrototypeSettings %>">
				<div>- <liferay-ui:message key="site-template-settings" /></div>
			</c:if>

			<c:if test="<%= deleteMissingLayouts %>">
				<div>- <liferay-ui:message key="delete-missing-layouts" /></div>
			</c:if>
		</div>
	</c:if>
</div>